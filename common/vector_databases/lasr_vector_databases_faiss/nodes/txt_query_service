#!/usr/bin/env python3
import rospy
import numpy as np

from lasr_vector_databases_msgs.srv import (
    TxtQueryRequest,
    TxtQueryResponse,
    TxtQuery,
)
from lasr_vector_databases_faiss import (
    load_model,
    parse_txt_file,
    get_sentence_embeddings,
    load_vector_database,
    query_database,
)

from typing import List
from math import inf


class TxtQueryService:
    def __init__(self):
        rospy.init_node("txt_query_service")
        self._sentence_embedding_model = load_model()
        rospy.Service("lasr_faiss/txt_query", TxtQuery, self.execute_cb)
        rospy.loginfo("Text Query service started")

    def execute_cb(self, req: TxtQueryRequest) -> TxtQueryResponse:
        txt_fps: List[str] = req.txt_paths
        index_paths: List[str] = req.index_paths
        query_sentence: str = req.query_sentence

        best_distances: list[float] = [inf] * req.k
        best_matches: list[str] = [""] * req.k

        for txt_fp, index_path in zip(txt_fps, index_paths):
            possible_matches: list[str] = parse_txt_file(txt_fp)
            query_embedding: np.ndarray = get_sentence_embeddings(
                [query_sentence],
                self._sentence_embedding_model,  # requires list of strings
            )
            distances, indices = query_database(index_path, query_embedding, k=req.k)
            current_nearest_matches = [possible_matches[i] for i in indices[0]]

            for i, match in enumerate(current_nearest_matches):
                if distances[0][i] < best_distances[-1]:
                    best_distances[-1] = distances[0][i]
                    best_matches[-1] = match
                    best_distances, best_matches = zip(
                        *sorted(zip(best_distances, best_matches))
                    )
                    best_distances = list(best_distances)
                    best_matches = list(best_matches)
                    best_distances.sort()

        return TxtQueryResponse(
            closest_sentences=best_matches,
            cosine_similarities=best_distances,
        )


if __name__ == "__main__":
    TxtQueryService()
    rospy.spin()
