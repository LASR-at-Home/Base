#!/usr/bin/env python3
import rospy
from lasr_speech.srv import Speech, SpeechResponse
from lasr_rasa.srv import Rasa
from lasr_speech_recognition_msgs.srv import TranscribeAudio
#import sounddevice
#import soundfile
#import pyaudio
from time import sleep
from multiprocessing import Process
import rospkg
import os
import actionlib

from lasr_speech_recognition_msgs.msg import (  # type: ignore
    TranscribeSpeechAction,
    TranscribeSpeechGoal,
)


class TranscribeAndParse:

    def __init__(self):
        rospy.wait_for_service("/lasr_rasa/parse")
        self.rasa = rospy.ServiceProxy("/lasr_rasa/parse", Rasa)
       # self.transcribe_audio = rospy.ServiceProxy("/whisper/transcribe_audio", TranscribeAudio) 
        self.speech_client = actionlib.SimpleActionClient("transcribe_speech", TranscribeSpeechAction)
        self.speech_client.wait_for_server()

       # self.sound_data = soundfile.read(os.path.join(rospkg.RosPack().get_path("lasr_speech"), "sounds", "beep.wav"))[0]

 #   def play_sound(self):
  #      def play():
   #         audio_interface = pyaudio.PyAudio()
    #        sample_rate = int(audio_interface.get_default_output_device_info()["defaultSampleRate"])
        #    sounddevice.play(self.sound_data, sample_rate,
                      #       device=audio_interface.get_default_output_device_info()["index"])
         #   sounddevice.wait()
     #       audio_interface.terminate()
      #  p = Process(target=play)
       # p.start()
        #sleep(0.5)

    def __call__(self, req):
     #   if req.play_sound:
      #      self.play_sound()
        goal = TranscribeSpeechGoal()
        self.speech_client.send_goal(goal)
        self.speech_client.wait_for_result()
        result = self.speech_client.get_result()
        text = result.sequence
        rospy.loginfo(text)
        rasa_response = self.rasa(text)
        rospy.loginfo(rasa_response)
        return SpeechResponse(rasa_response.json_response, rasa_response.success)

if __name__ == "__main__":
    rospy.init_node("lasr_speech")
    worker = TranscribeAndParse()
    rospy.Service("/lasr_speech/transcribe_and_parse", Speech, worker)
    rospy.spin()
