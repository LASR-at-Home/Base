#!/usr/bin/env python3

import re
import rospy
import lasr_vision_deepface.deepface as face_recognition
from sensor_msgs.msg import Image
from lasr_vision_msgs.srv import (
    Recognise,
    RecogniseRequest,
    RecogniseResponse,
    LearnFace,
    LearnFaceRequest,
    LearnFaceResponse,
    DetectFaces,
    DetectFacesRequest,
    DetectFacesResponse,
)

rospy.init_node("recognise_service")

recognise_debug_publishers = {}
learn_face_debug_publishers = {}
detect_faces_debug_publisher = None

recognise_debug_publisher = rospy.Publisher("/recognise/debug", Image, queue_size=1)
learn_face_debug_publisher = rospy.Publisher("/learn_face/debug", Image, queue_size=1)
cropped_face_publisher = rospy.Publisher(
    "/learn_face/debug/cropped_query_face", Image, queue_size=1
)
detect_faces_debug_publisher = rospy.Publisher(
    "/detect_faces/debug", Image, queue_size=1
)


def recognise(request: RecogniseRequest) -> RecogniseResponse:
    if request.dataset in recognise_debug_publishers:
        debug_publisher, similar_face_debug_publisher, cropped_face_publisher = (
            recognise_debug_publishers[request.dataset]
        )
    else:
        topic_name = re.sub(r"[\W_]+", "", request.dataset)
        debug_publisher = rospy.Publisher(
            f"/recognise/debug/{topic_name}", Image, queue_size=1
        )
        similar_face_debug_publisher = rospy.Publisher(
            f"/recognise/debug/{topic_name}/similar_face", Image, queue_size=1
        )
        cropped_face_publisher = rospy.Publisher(
            "/recognise/debug/cropped_query_face", Image, queue_size=1
        )
        recognise_debug_publishers[request.dataset] = (
            debug_publisher,
            similar_face_debug_publisher,
            cropped_face_publisher,
        )
    return face_recognition.recognise(
        request, debug_publisher, similar_face_debug_publisher, cropped_face_publisher
    )


def learn_face(request: LearnFaceRequest) -> LearnFaceResponse:
    if request.dataset in learn_face_debug_publishers:
        debug_publisher = learn_face_debug_publishers[request.dataset]
    else:
        topic_name = re.sub(r"[\W_]+", "", request.dataset)
        debug_publisher = rospy.Publisher(
            f"/learn_face/debug/{topic_name}", Image, queue_size=1
        )
    face_recognition.create_dataset(
        request.dataset,
        request.name,
        request.images,
        debug_publisher,
    )
    return LearnFaceResponse()


def detect_faces(request: DetectFacesRequest) -> DetectFacesResponse:
    return face_recognition.detect_faces(request, detect_faces_debug_publisher)


rospy.Service("/recognise", Recognise, recognise)
rospy.Service("/learn_face", LearnFace, learn_face)
rospy.Service("/detect_faces", DetectFaces, detect_faces)
rospy.loginfo("Face Recognition service started")
rospy.spin()
