#!/usr/bin/env python3

import sys
import rospy
from copy import deepcopy

from sensor_msgs.msg import Image

from lasr_vision_msgs.srv import Recognise, RecogniseRequest
from lasr_voice import Voice

if len(sys.argv) < 3:
    print("Usage: rosrun lase_recognition greet <source_topic> <dataset>")
    exit()

listen_topic = sys.argv[1]
dataset = sys.argv[2]
people_in_frame = []


people_in_frame = {}


def detect(image):
    rospy.loginfo("Received image message")
    global people_in_frame
    try:
        detect_service = rospy.ServiceProxy("/recognise", Recognise)
        req = RecogniseRequest()
        req.image_raw = image
        req.dataset = dataset
        req.confidence = 0.4
        resp = detect_service(req)
        for detection in resp.detections:
            people_in_frame[detection.name] = rospy.Time.now()
    except rospy.ServiceException as e:
        rospy.logerr("Service call failed: %s" % e)


def greet():
    voice = Voice()
    voice.speak(f"Hello, {' '.join(people_in_frame)}")



def image_callback(image):
    global people_in_frame
    prev_people_in_frame = list(people_in_frame.keys())
    # remove detections from people_in_frame that are older than 5 seconds long
    detect(image)
    for person in list(people_in_frame.keys()):
        if rospy.Time.now() - people_in_frame[person] > rospy.Duration(10):
            del people_in_frame[person]
    if (
        list(people_in_frame.keys()) != prev_people_in_frame
        and len(people_in_frame) > 0
    ) or (len(prev_people_in_frame) == 0 and len(people_in_frame) > 0):
        greet()


def listener():
    rospy.init_node("image_listener", anonymous=True)
    rospy.wait_for_service("/recognise")
    rospy.Subscriber(listen_topic, Image, image_callback, queue_size=1)
    rospy.spin()


if __name__ == "__main__":
    listener()
