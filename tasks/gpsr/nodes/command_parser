#!/usr/bin/env python3
import argparse
import smach
import rospy
from typing import Dict

from gpsr.load_known_data import GPSRDataLoader
from gpsr.regex_command_parser import Configuration, gpsr_compile_and_parse
from lasr_skills import AskAndListen, Say


def parse_args() -> Dict:
    parser = argparse.ArgumentParser(description="GPSR Command Parser")
    parser.add_argument(
        "--data-dir",
        type=str,
        default="../data/mock_data/",
        help="Path to the directory that contains the data json files.",
    )
    known, unknown = parser.parse_known_args()
    return vars(known)


class ParseCommand(smach.State):
    def __init__(self, data_config: Configuration):
        smach.State.__init__(
            self,
            outcomes=["succeeded", "failed"],
            input_keys=["transcribed_speech"],
            output_keys=["command"],
        )
        self.data_config = data_config

    def execute(self, userdata):
        rospy.loginfo(f"Received command : {userdata.transcribed_speech.lower()}")
        try:
            userdata.command = gpsr_compile_and_parse(
                self.data_config, userdata.transcribed_speech.lower()
            )
        except Exception as e:
            rospy.logerr(e)
            return "failed"
        return "succeeded"


class OutputParsedCommand(smach.State):
    def __init__(self):
        smach.State.__init__(
            self,
            outcomes=["succeeded", "failed"],
            input_keys=["command"],
            output_keys=["command_string"],
        )

    def _get_english_translation(self, command_dict: Dict) -> str:
        translation_str = ""

        for index, command in enumerate(command_dict["commands"]):
            command_paramaters = command_dict["command_params"][index]
            print(f"Command: {command}, parameters: {command_paramaters}")
            if index == 0:
                translation_str += "First, you want me to "
            else:
                translation_str += "Then, you want me to "
            guide = False
            if command == "take":
                if "object" in command_paramaters:
                    translation_str += f"take the {command_paramaters['object']} "
                    if "location" in command_paramaters:
                        translation_str += f"from the {command_paramaters['location']} "
                    elif "person" in command_paramaters:
                        translation_str += f"from {command_paramaters['person']} "
                    elif "room" in command_paramaters:
                        translation_str += f"from the {command_paramaters['room']} "
                else:  # take corresponds to guiding
                    guide = True
            elif command == "place":
                translation_str += f"place the {command_paramaters['object']} on the {command_paramaters['location']} "
            elif command == "deliver":
                translation_str += f"deliver the {command_paramaters['object']} "
                if "name" in command_paramaters:
                    translation_str += f"to {command_paramaters['name']} "
                    translation_str += f"in the {command_paramaters['location']} "
                elif "gesture" in command_paramaters:
                    translation_str += (
                        f"to the person who is {command_paramaters['gesture']} "
                    )
                    translation_str += f"in the {command_paramaters['location']} "
                else:
                    translation_str += f"to you."
            elif command == "go":
                translation_str += f"go to the "
                if "location" in command_paramaters:
                    translation_str += f"{command_paramaters['location']} "
                elif "room" in command_paramaters:
                    translation_str += f"{command_paramaters['room']} "
            elif command == "find":
                if "gesture" in command_paramaters:
                    translation_str += (
                        f"find the person who is {command_paramaters['gesture']} "
                    )
                    translation_str += f"in the {command_paramaters['location']} "
                elif "object" in command_paramaters:
                    translation_str += f"find the {command_paramaters['object']} "
                    translation_str += f"in the {command_paramaters['location']} "
            elif command == "talk":
                pass
            elif command == "answer":
                pass
            elif command == "meet":
                translation_str += f"meet {command_paramaters['name']} "
                if "location" in command_paramaters:
                    translation_str += f"in the {command_paramaters['location']} "
            elif command == "tell":
                pass
            elif command == "answer":
                pass
            elif command == "meet":
                pass
            elif command == "tell":
                pass
            elif command == "greet":
                pass
            elif command == "remember":
                pass
            elif command == "count":
                pass
            elif command == "describe":
                pass
            elif command == "offer":
                pass
            elif command == "follow":
                pass
            elif command == "accompany":
                pass
            if command == "guide" or guide:
                pass

        return translation_str

    def execute(self, userdata):
        try:
            command: Dict = userdata.command
            tts_phrase = self._get_english_translation(command)
        except Exception as e:
            rospy.logerr(e)
            return "failed"
        rospy.loginfo(tts_phrase)
        userdata.command_string = tts_phrase
        return "succeeded"


class CommandParserStateMachine(smach.StateMachine):
    def __init__(self, config: Configuration):
        smach.StateMachine.__init__(
            self,
            outcomes=["succeeded", "failed"],
            input_keys=["tts_phrase", "command_string"],
            output_keys=["command"],
        )
        self.config = config
        with self:
            smach.StateMachine.add(
                "GET_COMMAND",
                AskAndListen(),
                transitions={"succeeded": "PARSE_COMMAND", "failed": "GET_COMMAND"},
                remapping={
                    "tts_phrase": "tts_phrase",
                    "transcribed_speech": "transcribed_speech",
                },
            )
            smach.StateMachine.add(
                "PARSE_COMMAND",
                ParseCommand(data_config=self.config),
                transitions={
                    "succeeded": "OUTPUT_PARSED_COMMAND",
                    "failed": "GET_COMMAND",
                },
                remapping={
                    "transcribed_speech": "transcribed_speech",
                    "command": "command",
                },
            )
            smach.StateMachine.add(
                "OUTPUT_PARSED_COMMAND",
                OutputParsedCommand(),
                transitions={
                    "succeeded": "SAY_PARSED_COMMAND",
                    "failed": "GET_COMMAND",
                },
                remapping={"command": "command", "tts_phrase": "tts_phrase"},
            )
            smach.StateMachine.add(
                "SAY_PARSED_COMMAND",
                Say(),
                transitions={
                    "succeeded": "GET_COMMAND",
                    "aborted": "GET_COMMAND",
                    "preempted": "GET_COMMAND",
                },
                remapping={"text": "command_string"},
            )


if __name__ == "__main__":
    rospy.init_node("gpsr_command_parser")
    args = parse_args()
    data_loader = GPSRDataLoader(data_dir=args["data_dir"])
    gpsr_known_data: Dict = data_loader.load_data()
    config = Configuration(
        {
            "person_names": gpsr_known_data["names"],
            "location_names": gpsr_known_data["non_placeable_locations"],
            "placement_location_names": gpsr_known_data["placeable_locations"],
            "room_names": gpsr_known_data["rooms"],
            "object_names": gpsr_known_data["objects"],
            "object_categories_plural": gpsr_known_data["categories_plural"],
            "object_categories_singular": gpsr_known_data["categories_singular"],
        }
    )
    rospy.loginfo("GPSR Command Parser: Initialized")
    sm = CommandParserStateMachine(config)
    sm.userdata.tts_phrase = "I am ready to receive a command; ask away!"
    result = sm.execute()
    rospy.spin()
