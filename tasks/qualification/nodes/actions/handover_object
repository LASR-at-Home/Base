#!/usr/bin/env python3
import rospy
from actionlib import SimpleActionServer, SimpleActionClient

from lasr_speech_recognition_msgs.msg import (
    TranscribeSpeechAction,
    TranscribeSpeechGoal,
)
from qualification.msg import HandoverObjectAction, HandoverObjectResult
from play_motion_msgs.msg import PlayMotionAction, PlayMotionGoal
from pal_interaction_msgs.msg import TtsGoal, TtsAction
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal

from pal_startup_msgs.srv import StartupStart

from geometry_msgs.msg import (
    PoseStamped,
    Pose,
    Point,
    Quaternion,
    PoseWithCovarianceStamped,
)


class HandoverObject:

    def __init__(self):
        self.transcribe_speech = SimpleActionClient(
            "transcribe_speech", TranscribeSpeechAction
        )
        self.transcribe_speech.wait_for_server()

        self.start_head_manager = rospy.ServiceProxy(
            "/pal_startup_control/start", StartupStart
        )

        self.play_motion = SimpleActionClient("play_motion", PlayMotionAction)
        self.play_motion.wait_for_server()

        self.move_base = SimpleActionClient("move_base", MoveBaseAction)
        self.move_base.wait_for_server()

        self.tts = SimpleActionClient("/tts", TtsAction)
        self.tts.wait_for_server()
        self._action_server = SimpleActionServer(
            "handover_object",
            HandoverObjectAction,
            execute_cb=self.execute_cb,
            auto_start=False,
        )

        self._action_server.start()

    def execute_cb(self, goal):
        self.start_head_manager("head_manager", "")
        tts_goal = TtsGoal()
        tts_goal.rawtext.lang_id = "en_GB"
        pm_goal = PlayMotionGoal(motion_name="reach_arm", skip_planning=False)
        self.play_motion.send_goal_and_wait(pm_goal)

        tts_goal.rawtext.text = f"{goal.name}, please grab the {goal.object} in my hand, and say 'Done' when you are rady for me to release it."
        self.tts.send_goal_and_wait(tts_goal)
        while True:
            self.transcribe_speech.send_goal(TranscribeSpeechGoal())
            self.transcribe_speech.wait_for_result()
            result = self.transcribe_speech.get_result()
            if "done" in result.sequence.lower():
                break
        rospy.sleep(rospy.Duration(2))
        pm_goal = PlayMotionGoal(motion_name="open_gripper", skip_planning=False)
        self.play_motion.send_goal_and_wait(pm_goal)
        pm_goal = PlayMotionGoal(motion_name="home", skip_planning=False)
        self.play_motion.send_goal_and_wait(pm_goal)

        tts_goal = TtsGoal()
        tts_goal.rawtext.lang_id = "en_GB"
        tts_goal.rawtext.text = (
            "I'll go home now, if you need any more assistance, just come let me know!"
        )
        self.tts.send_goal_and_wait(tts_goal)

        move_base_goal = MoveBaseGoal()
        move_base_goal.target_pose.header.stamp = rospy.Time.now()
        move_base_goal.target_pose.header.frame_id = "map"
        move_base_goal.target_pose.pose.position = Point(0, 0, 0)
        move_base_goal.target_pose.pose.orientation = Quaternion(0, 0, 0, 1)
        self.move_base.send_goal_and_wait(move_base_goal)

        self._action_server.set_succeeded(HandoverObjectResult())


if __name__ == "__main__":
    rospy.init_node("handover_object")
    HandoverObject()
    rospy.spin()
