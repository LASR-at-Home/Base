#!/usr/bin/env python3

import rospy
import actionlib

from qualification.msg import (
    FindPersonAction,
    FindPersonResult,
    IdentifyAction,
    IdentifyGoal,
    DetectPeopleAction,
    DetectPeopleGoal,
)
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from actionlib import SimpleActionClient, SimpleActionServer
from pal_interaction_msgs.msg import TtsGoal, TtsAction
from geometry_msgs.msg import Pose, Point, Quaternion
from control_msgs.msg import FollowJointTrajectoryAction, FollowJointTrajectoryGoal
from trajectory_msgs.msg import JointTrajectoryPoint


class FindPerson:

    KB = {
        "lab": {
            "pose": Pose(
                position=Point(1.7, -0.72, 0.0),
                orientation=Quaternion(0.0, 0.0, -0.45, 0.89),
            )
        }
    }

    def __init__(self):
        rospy.loginfo("Waiting for action servers...")
        rospy.loginfo("move_base")
        self.move_base = SimpleActionClient("move_base", MoveBaseAction)
        self.move_base.wait_for_server()
        rospy.loginfo("head_controller")
        self.head_controller = actionlib.SimpleActionClient(
            "/head_controller/follow_joint_trajectory", FollowJointTrajectoryAction
        )
        self.head_controller.wait_for_server()
        rospy.loginfo("tts")
        self.tts = SimpleActionClient("/tts", TtsAction)
        self.tts.wait_for_server()
        rospy.loginfo("identify")
        self.identify = SimpleActionClient(
            "identify",
            IdentifyAction,
        )
        self.identify.wait_for_server()
        rospy.loginfo("detect_people")
        self.detect_people = SimpleActionClient(
            "detect_people",
            DetectPeopleAction,
        )
        self.detect_people.wait_for_server()
        rospy.loginfo("find_person")
        self._action_server = SimpleActionServer(
            "find_person",
            FindPersonAction,
            execute_cb=self.execute_cb,
            auto_start=False,
        )

        self._action_server.start()
        rospy.loginfo("Ready")

    def execute_cb(self, goal):
        tts_goal = TtsGoal()
        tts_goal.rawtext.lang_id = "en_GB"
        move_base_goal = MoveBaseGoal()
        move_base_goal.target_pose.header.frame_id = "map"
        head_goal = FollowJointTrajectoryGoal()
        head_goal.trajectory.joint_names = ["head_1_joint", "head_2_joint"]

        tts_goal.rawtext.text = f"Finding person {goal.name} in the {goal.location}..."
        self.tts.send_goal_and_wait(tts_goal)

        move_base_goal.target_pose.header.stamp = rospy.Time.now()
        move_base_goal.target_pose.pose = self.KB[goal.location]["pose"]
        self.move_base.send_goal_and_wait(move_base_goal)

        joint_positions = [[0.5, 0.0], [0.0, 0.0], [-0.5, 0.00]]

        for joint_position in joint_positions:
            point = JointTrajectoryPoint()
            point.positions = joint_position
            point.time_from_start = rospy.Duration(1)
            head_goal.trajectory.points = [(point)]
            self.head_controller.send_goal_and_wait(head_goal)

            self.identify.send_goal_and_wait(IdentifyGoal())
            identify_result = self.identify.get_result()
            if identify_result.name == goal.name:
                self.detect_people.send_goal_and_wait(DetectPeopleGoal())
                detect_people_result = self.detect_people.get_result()
                # Assume there is a single person
                person_point = detect_people_result.points[0]

                point = JointTrajectoryPoint()
                point.positions = [0.0, 0.0]
                point.time_from_start = rospy.Duration(1)
                head_goal.trajectory.points = [(point)]
                self.head_controller.send_goal_and_wait(head_goal)

                move_base_goal.target_pose.header.stamp = rospy.Time.now()
                move_base_goal.target_pose.pose = Pose(
                    position=Point(person_point.x, person_point.y + 1.0, 0.0),
                    orientation=self.KB[goal.location]["pose"].orientation,
                )
                self.move_base.send_goal_and_wait(move_base_goal)
                break

        self._action_server.set_succeeded(FindPersonResult())


if __name__ == "__main__":
    rospy.init_node("find_person")
    FindPerson()
    rospy.spin()
