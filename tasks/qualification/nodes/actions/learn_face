#!/usr/bin/env python3

from typing import Any
import rospy
import actionlib
import cv2_img
import torch

from qualification.msg import LearnFaceAction, LearnFaceResult
from lasr_vision_msgs.srv import LearnFace as LF, LearnFaceRequest as LFRequest
from pal_interaction_msgs.msg import TtsGoal, TtsAction
from sensor_msgs.msg import Image
from actionlib import SimpleActionClient
import qualification.clip_utils as clip


class LearnFace:

    def __init__(self):

        self.learn_face = rospy.ServiceProxy("/learn_face", LF)
        self.learn_face.wait_for_service()
        self.glasses_pub = rospy.Publisher("/learn_face/glasses", Image, queue_size=1)
        rospy.loginfo("got learn_face")

        self.tts = SimpleActionClient("/tts", TtsAction)
        self.tts.wait_for_server()

        self._action_server = actionlib.SimpleActionServer(
            "learn_face",
            LearnFaceAction,
            execute_cb=self.execute_cb,
            auto_start=False,
        )
        self._device = "cuda" if torch.cuda.is_available() else "cpu"
        self._model = clip.load_model(device=self._device)
        self._action_server.start()

    def _check_for_glasses(self) -> bool:
        """Checks if the person is wearing glasses using CLIP.

        Returns:
            bool: if the person is wearing glasses
        """
        labels = [
            "a person wearing glasses",
            "a person not wearing glasses",
        ]
        answer, probs, image = clip.vqa(self._model, labels)
        self.glasses_pub.publish((image))
        return answer == "a person wearing glasses"

    def execute_cb(self, goal):
        rospy.loginfo("Learning face!")

        tts_goal = TtsGoal()
        tts_goal.rawtext.lang_id = "en_GB"
        tts_goal.rawtext.text = f"{goal.name}, give me a moment to learn your face"
        self.tts.send_goal_and_wait(tts_goal)

        # Check for glasses and ask to remove
        glasses_detected = self._check_for_glasses()
        if glasses_detected:
            tts_goal.rawtext.text = "Please remove your glasses"
            self.tts.send_goal_and_wait(tts_goal)
            rospy.sleep(1)
            checks = 0
            while glasses_detected:
                glasses_detected = self._check_for_glasses()
                checks += 1
                if checks % 5 == 0:
                    tts_goal.rawtext.text = (
                        "I see you're still wearing glasses, please remove them"
                    )
                    self.tts.send_goal_and_wait(tts_goal)
                rospy.sleep(1)
            tts_goal.rawtext.text = "Thanks for removing your glasses!"
            self.tts.send_goal_and_wait(tts_goal)

        req = LFRequest()
        req.dataset = "qualification"
        req.name = goal.name
        req.n_images = 10
        self.learn_face(req)

        self._action_server.set_succeeded(LearnFaceResult())


if __name__ == "__main__":
    rospy.init_node("learn_face")
    LearnFace()
    rospy.spin()
