#!/usr/bin/env python3

from typing import Any
import rospy
import actionlib
import cv2_img
import torch

from qualification.msg import LearnFaceAction, LearnFaceResult
from lasr_vision_msgs.srv import LearnFace as LF, LearnFaceRequest as LFRequest
from pal_interaction_msgs.msg import TtsGoal, TtsAction
from sensor_msgs.msg import Image
from actionlib import SimpleActionClient
import qualification.run_clip as run_clip


class LearnFace:

    def __init__(self):

        self.learn_face = rospy.ServiceProxy("/learn_face", LF)
        self.learn_face.wait_for_service()
        rospy.loginfo("got learn_face")

        self.tts = SimpleActionClient("/tts", TtsAction)
        self.tts.wait_for_server()

        self._action_server = actionlib.SimpleActionServer(
            "learn_face",
            LearnFaceAction,
            execute_cb=self.execute_cb,
            auto_start=False,
        )
        self._device = "cuda" if torch.cuda.is_available() else "cpu"
        self._model, self._preprocess = run_clip.load_model(
            "ViT-B/32", device=self._device
        )
        self._action_server.start()

    def _check_for_glasses(self) -> bool:
        """Checks if the person is wearing glasses using CLIP.

        Returns:
            bool: if the person is wearing glasses
        """
        labels = [
            "a person wearing glasses",
            "a person not wearing glasses",
        ]
        # Get image from camera
        img_msg = rospy.wait_for_message("/xtion/rgb/image_raw", Image)
        img = cv2_img.msg_to_pillow_img(img_msg)
        probs = run_clip.run_clip(
            self._model, self._preprocess, labels, self._device, img
        )

        return probs[0, 0] > probs[0, 1]

    def execute_cb(self, goal):
        rospy.loginfo("Learning face!")

        tts_goal = TtsGoal()
        tts_goal.rawtext.lang_id = "en_GB"
        tts_goal.rawtext.text = f"{goal.name}, give me a moment to learn your face"
        self.tts.send_goal_and_wait(tts_goal)

        # Check for glasses and ask to remove
        glasses_detected = self.check_for_glasses()
        if glasses_detected:
            tts_goal.rawtext.text = "Please remove your glasses"
            self.tts.send_goal_and_wait(tts_goal)
            rospy.sleep(1)
            while glasses_detected:
                glasses_detected = self._check_for_glasses()
                rospy.sleep(1)
            tts_goal.rawtext.text = "Thanks for removing your glasses!"
            self.tts.send_goal_and_wait(tts_goal)

        req = LFRequest()
        req.dataset = "qualification"
        req.name = goal.name
        req.n_images = 50
        self.learn_face(req)

        self._action_server.set_succeeded(LearnFaceResult())


if __name__ == "__main__":
    rospy.init_node("learn_face")
    LearnFace()
    rospy.spin()
