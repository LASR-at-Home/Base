#!/usr/bin/env python3

import rospy
import actionlib

from lasr_speech_recognition_msgs.msg import (
    TranscribeSpeechAction,
    TranscribeSpeechGoal,
)
from qualification.msg import GetCommandAction, GetCommandResult
from pal_interaction_msgs.msg import TtsGoal, TtsAction
from actionlib import SimpleActionClient
from collections import defaultdict
import qualification.command_similarity as command_similarity
import rospkg
import os

COMMAND_ROOT = os.path.join(rospkg.RosPack().get_path("qualification"), "data")


class GetCommand:

    def __init__(self):

        self.transcribe_speech = actionlib.SimpleActionClient(
            "transcribe_speech",
            TranscribeSpeechAction,
        )
        self.transcribe_speech.wait_for_server()
        rospy.loginfo("got transcribe_speech")

        self.tts = SimpleActionClient("/tts", TtsAction)
        self.tts.wait_for_server()

        self._action_server = actionlib.SimpleActionServer(
            "get_command",
            GetCommandAction,
            execute_cb=self.execute_cb,
            auto_start=False,
        )

        self.issued_commands = defaultdict(list)

        self._action_server.start()

    def execute_cb(self, goal):
        tts_goal = TtsGoal()
        tts_goal.rawtext.lang_id = "en_GB"

        if goal.issuer in self.issued_commands.keys():
            tts_goal.rawtext.text = f"Can I do anything else for you, {goal.issuer}?"
        else:
            tts_goal.rawtext.text = f"{goal.issuer}, what can I do for you?"

        self.tts.send_goal_and_wait(tts_goal)

        self.transcribe_speech.send_goal(TranscribeSpeechGoal())
        self.transcribe_speech.wait_for_result()
        transcribe_result = self.transcribe_speech.get_result().sequence.lower()

        result = GetCommandResult()

        if "no" not in transcribe_result.split(" "):
            nearest_commands, distances = command_similarity.get_similar_commands(
                transcribe_result,
                os.path.join(COMMAND_ROOT, "command_index"),
                os.path.join(COMMAND_ROOT, "command_list.txt"),
            )
            result.command = nearest_commands[0]
            self.issued_commands[goal.issuer].append(result.command)
        self._action_server.set_succeeded(result)


if __name__ == "__main__":
    rospy.init_node("get_command")
    GetCommand()
    rospy.spin()
