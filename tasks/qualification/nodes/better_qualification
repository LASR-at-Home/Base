#!/usr/bin/env python3
import rospy

rospy.init_node("better_qualification")

from qualification.msg import (
    WaitGreetAction,
    WaitGreetGoal,
    IdentifyAction,
    IdentifyGoal,
    GreetAction,
    GreetGoal,
    GetNameAction,
    GetNameGoal,
    LearnFaceAction,
    LearnFaceGoal,
    GetCommandAction,
    GetCommandGoal,
    GuideAction,
    GuideGoal,
    FindPersonAction,
    FindPersonGoal,
    ReceiveObjectAction,
    ReceiveObjectGoal,
    HandoverObjectAction,
    HandoverObjectGoal,
)

from pal_interaction_msgs.msg import TtsGoal, TtsAction
from control_msgs.msg import FollowJointTrajectoryAction, FollowJointTrajectoryGoal
from trajectory_msgs.msg import JointTrajectoryPoint
from geometry_msgs.msg import (
    PoseStamped,
    Pose,
    Point,
    Quaternion,
    PoseWithCovarianceStamped,
)
from actionlib import SimpleActionClient
from move_base_msgs.msg import MoveBaseAction, MoveBaseGoal
from std_msgs.msg import String

# supress warnings
import warnings

warnings.filterwarnings("ignore")

location = "lab"
name = "unknown"
person_pose = None

print("Waiting for action servers...")
print("tts")
tts = SimpleActionClient("/tts", TtsAction)
tts.wait_for_server()
print("wait_greet")
wait_greet = SimpleActionClient("wait_greet", WaitGreetAction)
wait_greet.wait_for_server()
print("identify")
identify = SimpleActionClient("identify", IdentifyAction)
identify.wait_for_server()
print("greet")
greet = SimpleActionClient("greet", GreetAction)
greet.wait_for_server()
print("get_name")
get_name = SimpleActionClient("get_name", GetNameAction)
get_name.wait_for_server()
print("learn_face")
learn_face = SimpleActionClient("learn_face", LearnFaceAction)
learn_face.wait_for_server()
print("get_command")
get_command = SimpleActionClient("get_command", GetCommandAction)
get_command.wait_for_server()
print("guide")
guide = SimpleActionClient("guide", GuideAction)
guide.wait_for_server()
print("find_person")
find_person = SimpleActionClient("find_person", FindPersonAction)
find_person.wait_for_server()
print("torso_controller")
torso_controller = SimpleActionClient(
    "torso_controller/follow_joint_trajectory", FollowJointTrajectoryAction
)
torso_controller.wait_for_server()
print("receive_object")
receive_object = SimpleActionClient("receive_object", ReceiveObjectAction)
receive_object.wait_for_server()
print("handover_object")
handover_object = SimpleActionClient("handover_object", HandoverObjectAction)
handover_object.wait_for_server()
move_base = SimpleActionClient("move_base", MoveBaseAction)
move_base.wait_for_server()

print("All action servers are ready")

torso_raise_goal = FollowJointTrajectoryGoal()
torso_raise_goal.trajectory.joint_names = ["torso_lift_joint"]
point = JointTrajectoryPoint()
point.positions = [0.35]
point.time_from_start = rospy.Duration(1)
torso_raise_goal.trajectory.points.append(point)


torso_lower_goal = FollowJointTrajectoryGoal()
torso_lower_goal.trajectory.joint_names = ["torso_lift_joint"]
point = JointTrajectoryPoint()
point.positions = [0.15]
point.time_from_start = rospy.Duration(1)
torso_lower_goal.trajectory.points.append(point)


def exec_command(command):
    torso_controller.send_goal_and_wait(torso_lower_goal)
    global name
    global location
    global person_pose
    if (
        command == "Please guide me to the lab."
        or command == "Navigate to the couch, meet Mary, and guide her"
    ):
        goal = GuideGoal(name, location, "lab")
        guide.send_goal_and_wait(goal)
        location = "lab"
    elif command == "Please guide me to the kitchen.":
        goal = GuideGoal(name, location, "kitchen")
        guide.send_goal_and_wait(goal)
        location = "kitchen"
    elif command == "Go help Jared.":
        name = "jared"
        goal = FindPersonGoal("jared", location)
        find_person.send_goal_and_wait(goal)
    elif command == "Take the protein bars to Nicole.":
        goal = ReceiveObjectGoal("protein bars")
        receive_object.send_goal_and_wait(goal)

        if person_pose is not None:
            move_base_goal = MoveBaseGoal()
            move_base_goal.target_pose.header.stamp = rospy.Time.now()
            move_base_goal.target_pose.header.frame_id = "map"
            move_base_goal.target_pose.pose = person_pose
            move_base.send_goal_and_wait(move_base_goal)

        goal = HandoverObjectGoal("nicole", "protein bars")
        handover_object.send_goal_and_wait(goal)


command_publisher = rospy.Publisher("/goal_string", String)


def exec_command(command):
    torso_controller.send_goal_and_wait(torso_lower_goal)
    global name
    global location
    global person_pose
    if (
        command == "Please guide me to the lab."
        or command == "Navigate to the couch, meet Mary, and guide her"
    ):
        goal = GuideGoal(name, location, "lab")
        guide.send_goal_and_wait(goal)
        location = "lab"
    elif command == "Please guide me to the kitchen.":
        goal = GuideGoal(name, location, "kitchen")
        guide.send_goal_and_wait(goal)
        location = "kitchen"
    elif command == "Go help Jared.":
        name = "jared"
        goal = FindPersonGoal("jared", location)
        find_person.send_goal_and_wait(goal)
    elif command == "Find the black tea at the desk and take it to Matt.":
        command_publisher.publish(String("black-tea person matt"))
    elif command == "Take the protein bars to Matt.":
        goal = ReceiveObjectGoal("protein bars")
        receive_object.send_goal_and_wait(goal)

        if person_pose is not None:
            move_base_goal = MoveBaseGoal()
            move_base_goal.target_pose.header.stamp = rospy.Time.now()
            move_base_goal.target_pose.header.frame_id = "map"
            move_base_goal.target_pose.pose = person_pose
            move_base.send_goal_and_wait(move_base_goal)

        goal = HandoverObjectGoal("matt", "protein bars")
        handover_object.send_goal_and_wait(goal)


# Wait to be greeted
wait_greet.send_goal_and_wait(WaitGreetGoal())

# Raise the torso
torso_controller.send_goal_and_wait(torso_raise_goal)

# Try and identify the person
identify.send_goal_and_wait(IdentifyGoal())
identify_result = identify.get_result()

if identify_result.name != name or not identify_result.name:
    # Greet the person
    greet.send_goal_and_wait(GreetGoal(name=identify_result.name))

if not identify_result.success:
    get_name.send_goal_and_wait(GetNameGoal())
    get_name_result = get_name.get_result()
    name = get_name_result.name
    learn_face.send_goal_and_wait(LearnFaceGoal(name))
else:
    name = identify_result.name

# Get a command from the person, "guide me to the lab"
get_command.send_goal_and_wait(GetCommandGoal(name))
command_result = get_command.get_result()
command = command_result.command
print(command)
exec_command(command)
# name = "nicole"
# Raise the torso
torso_controller.send_goal_and_wait(torso_raise_goal)
person_pose = rospy.wait_for_message("/amcl_pose", PoseWithCovarianceStamped).pose.pose
# Get a command from the person, "find Jared"
get_command.send_goal_and_wait(GetCommandGoal(name))
command_result = get_command.get_result()
command = command_result.command
print(command)
exec_command(command)

# Raise the torso
torso_controller.send_goal_and_wait(torso_raise_goal)

# Get a command from the person, "take the pringles to {nicole}"
get_command.send_goal_and_wait(GetCommandGoal(name))
command_result = get_command.get_result()
command = command_result.command
print(command)
exec_command(command)

rospy.spin()

# # go home, the end
# tts_goal = TtsGoal()
# tts_goal.rawtext.lang_id = "en_GB"
# tts_goal.rawtext.text = (
#     "I'll go home now, if you need any more assistance, just come let me know!"
# )
# tts.send_goal_and_wait(tts_goal)

# move_base_goal = MoveBaseGoal()
# move_base_goal.target_pose.header.stamp = rospy.Time.now()
# move_base_goal.target_pose.header.frame_id = "map"
# move_base_goal.target_pose.pose.position = Point(0, 0, 0)
# move_base_goal.target_pose.pose.orientation = Quaternion(0, 0, 0, 1)
# move_base.send_goal_and_wait(move_base_goal)
