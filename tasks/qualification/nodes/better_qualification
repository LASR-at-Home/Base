#!/usr/bin/env python3
import rospy

rospy.init_node("better_qualification")

from qualification.msg import (
    WaitGreetAction,
    WaitGreetGoal,
    IdentifyAction,
    IdentifyGoal,
    GreetAction,
    GreetGoal,
    GetNameAction,
    GetNameGoal,
    LearnFaceAction,
    LearnFaceGoal,
    GetCommandAction,
    GetCommandGoal,
    GuideAction,
    GuideGoal,
    FindPersonAction,
    FindPersonGoal,
)

from pal_interaction_msgs.msg import TtsGoal, TtsAction


from actionlib import SimpleActionClient

# supress warnings
import warnings

warnings.filterwarnings("ignore")

location = "corridor"
name = "unknown"

print("Waiting for action servers...")
print("tts")
tts = SimpleActionClient("/tts", TtsAction)
tts.wait_for_server()
print("wait_greet")
wait_greet = SimpleActionClient("wait_greet", WaitGreetAction)
wait_greet.wait_for_server()
print("identify")
identify = SimpleActionClient("identify", IdentifyAction)
identify.wait_for_server()
print("greet")
greet = SimpleActionClient("greet", GreetAction)
greet.wait_for_server()
print("get_name")
get_name = SimpleActionClient("get_name", GetNameAction)
get_name.wait_for_server()
print("learn_face")
learn_face = SimpleActionClient("learn_face", LearnFaceAction)
learn_face.wait_for_server()
print("get_command")
get_command = SimpleActionClient("get_command", GetCommandAction)
get_command.wait_for_server()
print("guide")
guide = SimpleActionClient("guide", GuideAction)
guide.wait_for_server()
print("find_person")
find_person = SimpleActionClient("find_person", FindPersonAction)
find_person.wait_for_server()
print("All action servers are ready")


def after_guiding(to):
    global location
    location = to


commands = {
    "Please guide me to the lab.": (
        after_guiding,
        ["lab"],
        guide,
        GuideGoal,
        [
            name,
            location,
            "lab",
        ],
    ),
    "Please guide me to the kitchen.": (
        after_guiding,
        ["kitchen"],
        guide,
        GuideGoal,
        [
            name,
            location,
            "kitchen",
        ],
    ),
    "Could you please find Jared and ask if they need assistance.": (
        lambda: None,
        [],
        find_person,
        FindPersonGoal,
        ["jared", location],
    ),
}


# Wait to be greeted
wait_greet.send_goal_and_wait(WaitGreetGoal())

# Try and identify the person who greeted us
identify.send_goal_and_wait(IdentifyGoal())
identify_result = identify.get_result()

# Greet the person
greet.send_goal_and_wait(GreetGoal(name=identify_result.name))

if not identify_result.success:
    get_name.send_goal_and_wait(GetNameGoal())
    get_name_result = get_name.get_result()
    name = get_name_result.name
    learn_face.send_goal_and_wait(LearnFaceGoal(name))
else:
    name = identify_result.name

while not rospy.is_shutdown():

    # Get a command from the person
    get_command.send_goal_and_wait(GetCommandGoal(name))
    command_result = get_command.get_result()
    if not command_result.command:
        ## FINISH
        rospy.signal_shutdown(0)

    # Execute the command
    command = command_result.command
    post_cmd, post_cmd_args, action, goal, goal_args = commands[command]
    goal = goal(*goal_args)
    action.send_goal_and_wait(goal)
    post_cmd(*post_cmd_args)
